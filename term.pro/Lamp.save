#include "visdn.h"

#define LPRINTF if (Debug & DEBUG_LAMP) lprintf

LampFree(lp)
register Lamp *lp;
{
	register Lamp *olp, *tlp;

	if (Lamps==(Lamp *)0 || lp==(Lamp *)0)
		return;
	LPRINTF("LampFree %d (%s)\n", lp->num, lp->but->name);
	if (lp==Lamps)
		Lamps = Lamps->next;
	else for (olp=Lamps, tlp=Lamps->next; tlp; olp=tlp, tlp=tlp->next)
		if (lp==tlp)
		{
			olp->next = lp->next;
			break;
		}
}

LampCtrl(num, code, duration)
register int num;
int code, duration;
{
	register Lamp *lp;
	Lamp *LookLamp();

	LPRINTF("LampCtrl %x %d %x\n", num, code, duration);

	if (duration != 0)
		return;		/* not interested in transient indications */

	if (num==LTYPE_ALL)
	{
		for (lp=Lamps; lp; lp=lp->next)
			DoLamp(lp, num, code);
	} else if (lp = LookLamp(num))
	{
		DoLamp(lp, num, code);
	}
}

Lamp *LookLamp(num)
register int num;
{
	register Lamp *lp;

	for (lp=Lamps; lp; lp=lp->next)
		if (num==lp->num || (num & ~LTYPE_MASK)==lp->num)
			break;

	return lp;
}

DoLamp(lp, num, code)
register Lamp *lp;
int num, code;
{
	register int ltype;
	int changed = 0;

	ltype = num & LTYPE_MASK;

	LPRINTF("DoLamp ltype=%x num=%x iuse=%x stat=%x\n", ltype, num, lp->iuse_status, lp->stat_status);

	if (ltype==0 || ltype==LTYPE_IUSE || num==MSGLAMPNO || num==MUTELAMPNO || num==SPKRLAMPNO)
	{
		switch (code)
		{
		case LAMP_ON:
			if ((lp->iuse_status&LFLAG_ON)==0)
				changed = 1;
			lp->iuse_status = LFLAG_ON;
			break;
		case LAMP_OFF:
			if (lp->iuse_status&LFLAG_ON)
				changed = 1;
			lp->iuse_status = 0;
			break;
		}
	} else
	{
		switch (code)
		{
		case LAMP_ON:
			if ((lp->stat_status&LFLAG_ON)==0)
				changed = 1;
			lp->stat_status = LFLAG_ON;
			if (lp->timer)
				TimerRemove(lp->timer);
			lp->timer = (TimerItem *)0;
			break;
		case LAMP_OFF:
			if (lp->stat_status&LFLAG_ON)
				changed = 1;
			if (lp->timer)
				TimerRemove(lp->timer);
			lp->timer = (TimerItem *)0;
			lp->time_cnt = 0;
			lp->stat_status = 0;
			break;
		case LAMP_FLASH:
		case LAMP_FLUTTER:
			if (lp->timer==(TimerItem *)0)
			{
				extern int LampToggle();

				LPRINTF("Flash %d %s\n", lp->num, ((realtime()/TIMER_INT)%1) ? "on":"off");
				lp->timer = TimerAdd(LampToggle, (char *)lp);
				lp->time_cnt = 0;
				if (code==LAMP_FLASH)
				{
					lp->stat_status |= LFLAG_FLASH;
					if (((realtime()/TIMER_INT)%6)==0)
					{
						if ((lp->stat_status&LFLAG_ON)==0)
						{
							changed = 1;
							lp->stat_status |= LFLAG_ON;
						}
					} else
					{
						if (lp->stat_status&LFLAG_ON)
						{
							changed = 1;
							lp->stat_status &= ~LFLAG_ON;
						}
					}
				} else
				{
					lp->stat_status |= LFLAG_FLUTTER;
					if (((realtime()/TIMER_INT)%1)==0)
					{
						if ((lp->stat_status&LFLAG_ON)==0)
						{
							changed = 1;
							lp->stat_status |= LFLAG_ON;
						}
					} else
					{
						if (lp->stat_status&LFLAG_ON)
						{
							changed = 1;
							lp->stat_status &= ~LFLAG_ON;
						}
					}
				}
			}
			break;
		}
	}

	if (changed)
		DispBut(lp->but, &BUT_FONT);

	if (num==MSGLAMPNO)
	{
		if (code==LAMP_ON && changed && SendAUDIXMsg)
			SendHost(PROC_PHONE, AUDIXMSG, (char *)0);
	}
}

LampToggle(lp)
register Lamp *lp;
{
	if (lp)
	{
		if ((lp->stat_status&LFLAG_FLASH)
		    && ((LastTime/TIMER_INT)%6)==0)
		{
			lp->stat_status ^= LFLAG_ON;
			DispBut(lp->but, &BUT_FONT);
		} else if (lp->stat_status&LFLAG_FLUTTER)
		{
			lp->stat_status ^= LFLAG_ON;
			DispBut(lp->but, &BUT_FONT);
		}
	}

	return 0;
}
