# See 'toolman visdn' for more information on this script.

# Perform the specified command.
CMD=${0}

usage()
{
	exec >&2
	echo "Usage: ${CMD} subcommand|-- string"
	echo
	echo "Available subcommands (and abbreviations) and their arguments are:"
	echo "\ta adjunct"
	echo "\tb button [number]"
	echo "\tc conference [phone_number|pq_query]"
	echo "\tC cfa [phone_number|pq_query]"
	echo "\t  debug [+|-]value"
	echo "\td dial phone_number|pq_query	# Gets a call appearance first"
	echo "\tD drop"
	echo "\th hold"
	echo "\tH hangup"
	echo "\tl line [call_appearance]	# Where the CA is [a-zA-D] or 1-30"
	echo "\tm mute"
	echo "\tr redial"
	echo "\ts speaker"
	echo "\tS shift"
	echo "\tt transfer [phone_number|pq_query]"
	echo "\tv volume up|+|down|-"
	echo "\tw window exit|uncache/exit|toggle|open|close"
	echo
	echo "'-- string' sends 'string' to the phone with no processing"
}

# Check for correct number of arguments.
[ ${#} -eq 0 ] && usage && exit 1

VISDN_PIPE=${VISDN_PIPE:-${HOME}/.visdnpipe}
if [ ! -p ${VISDN_PIPE} -a ! -c ${VISDN_PIPE} ]	# "-c" for testing
then
	# The pipe is removed by visdn when it exits.
	echo "${CMD}: You don't appear to be running visdn!" >&2
	exit 1
fi


# Sets NUMBER to the phone number to dial,
# and FULL_NUMBER to what we use in the info message.
do_pq()
{
	# If the 1st character is [a-zA-Z], assume it's a pq lookup.
	case ${1} in
	[a-zA-Z]*)
		# Separate the phone number field with a tab to make it easy
		# to parse.
		FULL_NUMBER=`pq -o '%20name %3loc %16ema 	%tel' ${*}`
		[ ${?} -ne 0 ] && exit 3

		NUM=`echo "${FULL_NUMBER}" | wc -l`
		if [ ${NUM} -gt 1 ]
		then
			# For now, if there's more than 1 name, quit.
			echo "Sorry, there are multiple entries for '${*}'." >&2
			exit 4
		fi
		# Get the phone number only.
		# Prepend "=" to tell visdn this is a pq-style number.
		NUMBER="="`echo "${FULL_NUMBER}" | sed 's/.*	//'`
		;;
	"")
		NUMBER=""
		FULL_NUMBER="${NUMBER}"
		;;
	*)
		NUMBER="${*}"
		FULL_NUMBER="${NUMBER}"
		;;
	esac
}

# Basically, the way this works is to send a string to the
# UNIX process (by writing to a pipe it's reading).
# The string contains a leading 1-character number (specifying the action
# to take) and a string specific to the action.
DIALNUM730=`echo "\0356"`	# octal 0356 is visdn char for DIALNUM730
RMTACT730=`echo "\0357"`	# octal 0357 is visdn char for RMTACT730

SUB=${1}
shift

case ${SUB} in
a|adjunct)
	echo "${RMTACT730}adjunct" > ${VISDN_PIPE}
	;;
b|button)
	if [ "${1}" = "" ]
	then
		NUMBER=""
	else
		NUMBER=" ${1}"	# allow only 1 argument
	fi
	
	echo "${RMTACT730}button${NUMBER}" > ${VISDN_PIPE}
	;;
c|conference)
	if [ "${1}" = "" ]
	then
		# Just push the button.
		echo "${RMTACT730}conference" > ${VISDN_PIPE}
	else
		do_pq "${*}"
		echo "Conferencing: ${FULL_NUMBER}"
		echo "${RMTACT730}conference ${NUMBER}" > ${VISDN_PIPE}
		echo "\nEnter '${CMD} ${SUB}' (or press the conference button) when ready."
	fi
	;;
d|dial)
	if [ ${#} -eq 0 ]
	then
		exec >&2
		echo "Usage: ${CMD} ${SUB} phone_number|pq_query"
		echo
		echo "In addition to regular phone digits, the phone_number"
		echo "can contain a-z and A-Z (e.g., '1800CALLATT')."
		exit 1
	fi
	do_pq "${*}"
	echo "Calling: ${FULL_NUMBER}"
	[ "${FULL_NUMBER}" != "${NUMBER}" ] && echo "Dialing: ${NUMBER}"
	echo "${DIALNUM730}${NUMBER}" > ${VISDN_PIPE}
	;;
C|cfa)
	# usages:
	#
	#	cfa			# Toggle CFA lamp
	#	cfa number		# Forward to 'number' (light must be off)

	if [ ${#} -eq 0 ]
	then
		# Toggle CFA lamp.
		echo "${RMTACT730}CFA" > ${VISDN_PIPE}
	else
		do_pq "${*}"
		echo "${RMTACT730}CFA ${NUMBER}" > ${VISDN_PIPE}
	fi
	;;
D|drop)
	echo "${RMTACT730}drop" > ${VISDN_PIPE}
	;;
h|hold)
	echo "${RMTACT730}hold" > ${VISDN_PIPE}
	;;
H|hangup)
	echo "${RMTACT730}hangup" > ${VISDN_PIPE}
	;;
l|line)
	if [ "$1" = "" ]
	then
		echo "${RMTACT730}line" > ${VISDN_PIPE}
	else
		# Can be [a-zA-D] or 1-30.
		echo "${RMTACT730}line ${1}" > ${VISDN_PIPE}
	fi
	;;
m|mute)
	echo "${RMTACT730}mute" > ${VISDN_PIPE}
	;;
r|redial)
	echo "${RMTACT730}redial" > ${VISDN_PIPE}
	;;
s|speaker)
	echo "${RMTACT730}speaker" > ${VISDN_PIPE}
	;;
S|shift)
	echo "${RMTACT730}shift" > ${VISDN_PIPE}
	;;
t|transfer)
	if [ "${1}" = "" ]
	then
		# Just push the button.
		echo "${RMTACT730}transfer" > ${VISDN_PIPE}
	else
		do_pq "${*}"
		echo "Transfering to: ${FULL_NUMBER}"
		[ "${FULL_NUMBER}" != "${NUMBER}" ] && echo "Dialing: ${NUMBER}"
		echo "${RMTACT730}transfer ${NUMBER}" > ${VISDN_PIPE}
		echo "\nEnter '${CMD} ${SUB}' (or press the transfer button) when ready."
	fi
	;;
v|volume)
	case ${1} in
	up|+)	X="volup" ;;
	down|-)	X="voldown" ;;
	*)	echo "Usage: ${CMD} ${SUB} up|+|down|-" >&2
		exit 1
		;;
	esac
	echo "${RMTACT730}${X}" > ${VISDN_PIPE}
	;;
w|window)
	case ${1} in
	e|exit)		X="exit" ;;
	u|uncache/exit)	X="uncache/exit" ;;
	t|toggle)	X="toggle" ;;
	o|open)		X="open" ;;
	c|close)	X="close" ;;
	*)	echo "Usage: ${CMD} ${SUB} exit|uncache/exit|toggle|open|close" >&2
		exit 1
		;;
	esac
	echo "${RMTACT730}${X}" > ${VISDN_PIPE}
	;;

debug)
	if [ "${1}" = "" ]
	then
		echo "Usage: ${CMD} ${SUB} [+|-]new_debug_value" >&2
		exit 1
	else
		echo "${RMTACT730}debug ${1}" > ${VISDN_PIPE}
	fi
	;;

"-?"|-h|help|usage)
	usage
	;;

--)
	# It's not a reserved token, so send it to the phone with
	# no processing.
	echo "${RMTACT730}${*}" > ${VISDN_PIPE}
	;;

*)
	echo "${CMD}: Unknown subcommand!\t\t\c" >&2
	usage
	exit 1
	;;
esac

exit 0
